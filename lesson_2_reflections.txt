What happens when you initialize a repository? Why do you need to do it?

    Initializing a repository tells Git to start making a record of the
    version history of the files in the repository. If a repository was 
    not initialized, version control would not be enabled at all and it
    would be just like saving manually.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is like a go-between for the working directory and
	the repository so that files can be more selectively added to the
	repository. Instead of committing all of the files in the working
	directory at once, only files with relevant changes are committed together. This would make it easier when reviewing the history to 
	see the logic behind each change.

How can you use the staging area to make sure you have one commit per logical
change?

	By placing file(s) into the staging area and running git diff 
	--staged I can view the differences between the last commit and
	the pending commit to make sure that there is only one logical
	change between each commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would be helpful to keep track of discrete versions of the
	same code, such as different language versions, experimental and 
	stable versions. Having separate branches would make it easier to
	find commits for a particular version, rather than try to list all
	of the commit ids somewhere else that are all, for example, "experimental."

How do the diagrams help you visualize the branch structure?

	Having diagrams, especially with the "parent" arrows, helps me
	understand which commits are accessible and how each branch is
	defined. It's rather difficult to remember which commits spawned
	offshoots without branch diagrams, even more so with a lot of 
	branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    Merging two branches together will result in a single commit that
    has all of the shared lines, and added lines of the two branches,
    while removing anything that was deleted from their shared
    parent. The resulting merged branch will have parents from both
    branches, which is why both are now accessible to the new one.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?